name: 'AWS SSM Deploy'
description: 'Deploy to EC2 instance using AWS SSM with ECR image'

inputs:
  EC2:
    description: 'EC2 instance ID'
    required: true
  IMAGE:
    description: 'Docker image name'
    required: true
  ECR:
    description: 'ECR repository URL'
    required: true
  HOST_PORT:
    description: 'Port to run the container'
    required: true
  CONTAINER_PORT:
    description: 'Container port to run the container'
    required: true
  WORKDIR:
    description: 'Working directory to run the deployment script'
    required: false
    default: '/home/ec2-user/deploy'
  SCRIPT:
    description: 'Deployment script to run'
    required: false
    default: 'deploy1.sh'
  PRUNE:
    description: 'Prune the old images'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Deploy using AWS SSM
      shell: bash
      run: |
        COMMAND_ID=$(aws ssm send-command \
          --targets "Key=instanceids,Values=${{ inputs.EC2 }}" \
          --document-name "AWS-RunShellScript" \
          --parameters commands=["cd ${{ inputs.WORKDIR }} && chmod +x ./${{ inputs.SCRIPT }} && ./${{ inputs.SCRIPT }} \
            --image-name ${{ inputs.IMAGE }} \
            --ecr-url ${{ inputs.ECR }} \
            --host-port ${{ inputs.HOST_PORT }} \
            --container-port ${{ inputs.CONTAINER_PORT }} \
            --aws-region ap-northeast-2 \
            --image-tag latest
          "] \
          --comment "Deploy ${{ inputs.ECR }}" \
          --output text \
          --query "Command.CommandId")

        echo "배포 명령어 실행 ID: $COMMAND_ID"

        echo "명령어 실행 완료 대기 중..."
        aws ssm wait command-executed \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ inputs.EC2 }}"

        # 명령어 실행 상태와 출력 로그를 함께 확인
        COMMAND_STATUS=$(aws ssm get-command-invocation \
          --command-id "$COMMAND_ID" \
          --instance-id "${{ inputs.EC2 }}" \
          --query "Status" \
          --output text)

        # 상태별 로그 출력 및 처리
        case "$COMMAND_STATUS" in
          "Success")
            echo "배포 성공"
            echo "=== 배포 결과 로그 ==="
            aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "${{ inputs.EC2 }}" \
              --query "StandardOutputContent" \
              --output text
            ;;
            
          "InProgress")
            echo "배포 진행 중"
            echo "=== 현재까지의 진행 로그 ==="
            aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "${{ inputs.EC2 }}" \
              --query "StandardOutputContent" \
              --output text
            ;;
            
          "Failed")
            echo "배포 실패"
            echo "=== 상세 오류 로그 ==="
            # 표준 에러 출력
            echo "표준 에러:"
            aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "${{ inputs.EC2 }}" \
              --query "StandardErrorContent" \
              --output text
            
            # 표준 출력도 함께 확인
            echo "표준 출력:"
            aws ssm get-command-invocation \
              --command-id "$COMMAND_ID" \
              --instance-id "${{ inputs.EC2 }}" \
              --query "StandardOutputContent" \
              --output text
            exit 1
            ;;
            
          *)
            echo "알 수 없는 상태: $COMMAND_STATUS"
            exit 1
            ;;
        esac

        if [ "${{ inputs.PRUNE }}" == "true" ]; then
          echo "Pruning old images..."

          COMMAND_ID=$(aws ssm send-command \
            --targets "Key=instanceids,Values=${{ inputs.EC2 }}" \
            --document-name "AWS-RunShellScript" \
            --parameters commands=["docker image prune -a -f"] \
            --comment "Prune Docker images from EC2 Instance ${{ inputs.EC2 }}" \
            --output text \
            --query "Command.CommandId")

          echo "명령어 실행 완료 대기 중..."
          aws ssm wait command-executed \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ inputs.EC2 }}"

          # 명령어 실행 상태와 출력 로그를 함께 확인
          COMMAND_STATUS=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ inputs.EC2 }}" \
            --query "Status" \
            --output text)

          # 상태별 로그 출력 및 처리
          case "$COMMAND_STATUS" in
            "Success")
              echo "Docker 이미지 정리 성공"
              aws ssm get-command-invocation \
                --command-id "$COMMAND_ID" \
                --instance-id "${{ inputs.EC2 }}" \
                --query "StandardOutputContent" \
                --output text
              ;;
              
            "Failed")
              echo "Docker 이미지 정리 실패"
              echo "=== 상세 오류 로그 ==="
              # 표준 에러 출력
              echo "표준 에러:"
              aws ssm get-command-invocation \
                --command-id "$COMMAND_ID" \
                --instance-id "${{ inputs.EC2 }}" \
                --query "StandardErrorContent" \
                --output text
              
              # 표준 출력도 함께 확인
              echo "표준 출력:"
              aws ssm get-command-invocation \
                --command-id "$COMMAND_ID" \
                --instance-id "${{ inputs.EC2 }}" \
                --query "StandardOutputContent" \
                --output text
                
              # 응답 코드 확인
              echo "응답 코드:"
              aws ssm get-command-invocation \
                --command-id "$COMMAND_ID" \
                --instance-id "${{ inputs.EC2 }}" \
                --query "ResponseCode" \
                --output text
              
              exit 1
              ;;
              
            "InProgress")
              echo "Docker 이미지 정리 진행 중..."
              aws ssm get-command-invocation \
                --command-id "$COMMAND_ID" \
                --instance-id "${{ inputs.EC2 }}" \
                --query "StandardOutputContent" \
                --output text
              ;;
              
            *)
              echo "알 수 없는 상태: $COMMAND_STATUS"
              echo "=== 오류 상세 정보 ==="
              aws ssm get-command-invocation \
                --command-id "$COMMAND_ID" \
                --instance-id "${{ inputs.EC2 }}" \
                --query "{Error:StandardErrorContent,Output:StandardOutputContent,ResponseCode:ResponseCode}" \
                --output json
              exit 1
              ;;
          esac
        fi
